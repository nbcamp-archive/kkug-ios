#!/bin/sh

# swiftlint
LINT=$(which swiftlint)

if [[ -e "${LINT}" ]]; then
	echo "Hook🪝: SwiftLint 검사를 시작합니다."
else
	echo "Hook🪝: SwiftLint가 존재하지 않습니다."
	echo "$(brew install swiftlint) 명령어를 통해 수동으로 설치해주세요."
	exit 1
fi

FILES=$(git diff --stat --cached)
TARGETS=$(git diff --stat --cached --diff-filter=d --name-only $(git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)) | grep -F ".swift")

if [ -n "$FILES" -a -z "$TARGETS" ]; then
	printf "Hook🪝: 수고하셨습니다."
	exit 0

elif [ -z "${FILES}" ]; then
	printf ""
	printf "\n 'git add' 명령어를 먼저 진행해주세요."
	exit 1

elif [ -z "${TARGETS}" ]; then
	printf "Hook🪝: 변경된 Swift 파일을 찾을 수 없습니다."
	printf "\n 'git add' 명령어를 먼저 진행해주세요."
	exit 1
fi

# swiftlint apply custom rules to only staged files
RESULTS=$($LINT lint --quiet --config .swiftlint.yml)
STAGED_FILES=$(git diff --cached --name-only | grep ".swift$")
if [[ "$STAGED_FILES" = "" ]]; then 
    printf "Hook🪝: 변경된 Swift 파일이 없습니다."
    exit 0
else
    for FILE in $STAGED_FILES; do
        RESULTS=$($LINT lint --quiet "$FILE" --config .swiftlint.yml)
    done
fi
if [ "$RESULTS" == "" ]; then
	printf "Hook🪝: SwiftLint 검사를 통과했습니다.\n"
	exit 0
else
	echo ""
	printf "Hook🪝: SwiftLint 검사를 통과하지 못했습니다.\n"
	echo "$RESULTS" | while read -r line; do
		FILEPATH=$(echo "$line" | cut -d : -f 1)
		L=$(echo "$line" | cut -d : -f 2)
		C=$(echo "$line" | cut -d : -f 3)
		TYPE=$(echo "$line" | cut -d : -f 4 | cut -c 2-)
		MESSAGE=$(echo "$line" | cut -d : -f 5 | cut -c 2-)
		DESCRIPTION=$(echo "$line" | cut -d : -f 6 | cut -c 2-)
		if [ $TYPE = "warning" ]; then
			printf "\033[0;33m$TYPE ⚠️\033[0m\n"
			# warning일 경우에는 커밋을 진행할 수 있도록 설정하려면 주석 해제
      # printf "$FILEPATH:$L:$C\n"
      # printf "$MESSAGE: - $DESCRIPTION\n"
      # exit 0
		elif [ $TYPE = "error" ]; then
			printf "\033[0;31m$TYPE ❌ \033[0m\n"
		fi
		printf "$FILEPATH:$L:$C\n"
		printf "$MESSAGE: - $DESCRIPTION\n"
	done
	printf "\n Hook🪝: SwiftLint rules에 맞춰 코드를 정리하고 다시 시도해야 합니다.\n"
	exit 1
fi